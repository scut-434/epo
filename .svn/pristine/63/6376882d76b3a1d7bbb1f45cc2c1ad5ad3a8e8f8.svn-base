package com.gzgb.epo.service.warning;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gzgb.epo.dao.warning.SensitiveListDao;
import com.gzgb.epo.entity.BlogList;
import com.gzgb.epo.entity.SensitiveList;
import com.gzgb.epo.service.base.BaseService;
import com.gzgb.epo.util.DateUtil;

/**
 * 
 * <pre>
 * 敏感信息service
 * </pre>
 * @author XiaoJian
 * @version 1.0, 2014-3-1
 */
@Service
@Transactional(readOnly = true)
public class SensitiveListService extends BaseService<SensitiveList> {
	
	private static Logger logger = LoggerFactory
	.getLogger(SensitiveListService.class);

	@Autowired
	private SensitiveListDao sensitiveListDao;
	
	private static String[] sourceArray = new String[] { "新闻", "评论", "微博", "论坛","博客"};
	
	private static String[] natureArray = new String[] { "真实", "谣言"};
	
	private static String[] levelArray = new String[] { "特级预警", "一级预警", "二级预警"};
	
	/**
	 * 
	 * <pre>
	 * 根据时间戳、站点、内容查询敏感信息
	 * </pre>
	 * 
	 * @param startTime
	 *            开始时间戳
	 * @param endTime
	 *            结束时间戳
	 * @param site
	 *            站点
	 * @param content
	 *            内容
	 * @param page
	 *            当前第几页
	 * @param rows
	 *            每页显示数目
	 * @param sort
	 *            按某字段排序
	 * @param order
	 *            升/降序
	 * @return
	 */
	public Map<String, Object> findSensitive(Integer startTime, Integer endTime,
			Integer site, String content, Integer page, Integer rows,
			String sort, String order) {
		logger.info("--findSensitive()方法");
		Map<String, Object> map = sensitiveListDao.findSensitive(startTime, endTime,
				site, content, page, rows, sort, order);
		return map;
	}

	/**
	 * 
	 * <pre>
	 * 根据时间戳、站点查询敏感度最高的10条敏感信息
	 * </pre>
	 * 
	 * @param startTime
	 *            开始时间戳
	 * @param endTime
	 *            结束时间戳
	 * @param site
	 *            站点
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> findSensitiveTop10(Integer startTime,
			Integer endTime, Integer site) {
		logger.info("--findSensitiveTop10()方法");
		Map<String, Object> map = findSensitive(startTime, endTime, site, null,
				null, null, null, null);
		Map<String, Object> myMap = new HashMap<String, Object>();
		myMap.put("data1", "");
		myMap.put("data2", "");
		myMap.put("nature", natureArray);
		myMap.put("level", levelArray);
		List<Map<String, Object>> data1 = new ArrayList<Map<String, Object>>();
		List<Map<String, Object>> data2 = new ArrayList<Map<String, Object>>();
		if (map != null && !"".equals(map.get("rows").toString())) {
			List<SensitiveList> objList = (List<SensitiveList>) map.get("rows");
			if(objList!=null){
				
				int count = 10;
				if(objList.size()<10){
					count = objList.size();
				}
				for (int i = 0; i < count; i++) {
					SensitiveList sensitiveList = objList.get(i);
					Map<String, Object> inMap = new HashMap<String, Object>();
					inMap.put("id", sensitiveList.getId());
					inMap.put("jslSourceUrl", sensitiveList.getJslSourceUrl());
					inMap.put("jslSourceType", sensitiveList.getJslSourceType());
					inMap.put("jslTitle", sensitiveList.getJslTitle());
					inMap.put("jslKeywords", sensitiveList.getJslKeywords());
					inMap.put("jslReserved", sensitiveList.getJslReserved());
					inMap.put("jslCommentTotal", sensitiveList.getJslCommentTotal());
					inMap.put("jslReservedTotal", sensitiveList.getJslReservedTotal());
					inMap.put("jslReplyTotal", sensitiveList.getJslReplyTotal());
					inMap.put("jslViewTotal", sensitiveList.getJslViewTotal());
					inMap.put("wsmName", sensitiveList.getWsmId().getWsmName());
					inMap.put("url", "/sensitive/update");
					inMap.put("jslNature", sensitiveList.getJslNature());
					inMap.put("jslLevel", sensitiveList.getJslLevel());
					inMap.put("jslProposal", sensitiveList.getJslProposal());
					Long time = Long.parseLong(sensitiveList.getJslTimestamp()
							.toString()) * 1000;
					SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm"); // 格式化日期
					inMap.put("jslTimestamp", f.format(new Date(time)));
					if(i<5){
						data1.add(inMap);
					}else{
						data2.add(inMap);
					}
					
				}
			}

		}
		if(data1.size()>0){
			myMap.put("data1", data1);
		}
		if(data2.size()>0){
			myMap.put("data2", data2);
		}
		return myMap;
	}
	
	/**
	 * 
	 * <pre>
	 * 获取所属性质
	 * </pre>
	 * 
	 * @param nature
	 * @return
	 */
	public String getNature(Integer nature) {
		logger.info("---getNature()方法");
		if (nature != null) {
			return natureArray[nature];
		}
		return null;
	}
	
	/**
	 * 
	 * <pre>
	 * 获取所属级别
	 * </pre>
	 * 
	 * @param level
	 * @return
	 */
	public String getLevel(Byte level) {
		logger.info("---getLevel()方法");
		if (level != null) {
			return levelArray[level];
		}
		return null;
	}
	
	/**
	 * 
	 * <pre>
	 * 获取来源类别
	 * </pre>
	 * 
	 * @param level
	 * @return
	 */
	public String getSource(Integer source) {
		logger.info("---getSource()方法");
		if (source != null) {
			return sourceArray[source - 1];
		}
		return null;
	}
	
	/**
	 * 
	 * <pre>
	 * 查找最新舆情
	 * </pre>
	 * @return
	 */
	public List<Map<String, Object>> findLatelySensitive(){
		logger.info("--findLatelySensitive()方法");
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd"); // 格式化日期
		
		Date date = DateUtil.parseDateTime("2013-05-05 23:23:23");
		//Date date = new Date();
		String start = f.format(date);
		f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String end = f.format(date);
		Long startT = DateUtil.parseSimpleDate(start).getTime()/1000;
		Long endT = DateUtil.parseDateTime(end).getTime()/1000;
		Map<String, Object> map = findSensitive(startT.intValue(), endT.intValue(), null, null,
				null, null, null, null);
		if (map != null && !"".equals(map.get("rows").toString())) {
			List<SensitiveList> objList = (List<SensitiveList>) map.get("rows");
			if(objList!=null){
				int count = 10;
				if(objList.size()<10){
					count = objList.size();
				}
				for (int i = 0; i < count; i++) {
					SensitiveList sensitiveList = objList.get(i);
					Map<String, Object> inMap = new HashMap<String, Object>(); 
					inMap.put("wsmName", sensitiveList.getWsmId().getWsmName());
					inMap.put("jslTitle", sensitiveList.getJslTitle());
					inMap.put("jslSourceUrl", sensitiveList.getJslSourceUrl());
					inMap.put("jslSourceType", getSource(sensitiveList.getJslSourceType()));
					inMap.put("jslSensitivity", sensitiveList.getJslSensitivity());
					inMap.put("jslNature", getNature(sensitiveList.getJslNature()));
					inMap.put("jslLevel", getLevel(sensitiveList.getJslLevel()));
					
					Long time = Long.parseLong(sensitiveList.getJslTimestamp().toString()) * 1000;
					f = new SimpleDateFormat("yyyy-MM-dd HH:mm"); // 格式化日期
					inMap.put("jslTimestamp", f.format(new Date(time)));
					dataList.add(inMap);
				}
			}
		}
		
		return dataList;
	}

}
