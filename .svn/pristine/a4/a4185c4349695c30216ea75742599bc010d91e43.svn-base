package com.gzgb.epo.service.warning;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gzgb.epo.dao.warning.BlogListDao;
import com.gzgb.epo.entity.BlogList;
import com.gzgb.epo.entity.WeiBoList;
import com.gzgb.epo.service.base.BaseService;
import com.gzgb.epo.util.DateUtil;

/**
 * 
 * <pre>
 * 博客舆情service
 * </pre>
 * 
 * @author XiaoJian
 * @version 1.0, 2014-2-25
 */
@Service
@Transactional(readOnly = true)
public class BlogListService extends BaseService<BlogList> {

	private static Logger logger = LoggerFactory
			.getLogger(BlogListService.class);

	@Autowired
	private BlogListDao blogListMainDao;

	/**
	 * 
	 * <pre>
	 * 根据时间戳、博客站点、博客内容查询博客
	 * </pre>
	 * 
	 * @param startTime
	 *            开始时间戳
	 * @param endTime
	 *            结束时间戳
	 * @param site
	 *            博客站点
	 * @param content
	 *            博客内容
	 * @param page
	 *            当前第几页
	 * @param rows
	 *            每页显示数目
	 * @param sort
	 *            按某字段排序
	 * @param order
	 *            升/降序
	 * @return
	 */
	public Map<String, Object> findBlog(Integer startTime, Integer endTime,
			Integer site, String content, Integer page, Integer rows,
			String sort, String order) {
		logger.info("--findBlog()方法");
		Map<String, Object> map = blogListMainDao.findBlog(startTime, endTime,
				site, content, page, rows, sort, order);
		return map;
	}

	/**
	 * 
	 * <pre>
	 * 根据时间戳、博客站点查询热度最高的20条博客
	 * </pre>
	 * 
	 * @param startTime
	 *            开始时间戳
	 * @param endTime
	 *            结束时间戳
	 * @param site
	 *            博客站点
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<Map<String, Object>> findBlogTop20(Integer startTime,
			Integer endTime, Integer site) {
		logger.info("--findBlogTop20()方法");
		Map<String, Object> map = findBlog(startTime, endTime, site, null,
				null, null, null, null);
		List<Map<String, Object>> myMap = null;
		if (map != null && !"".equals(map.get("rows").toString())) {
			myMap = new ArrayList<Map<String, Object>>();
			List<BlogList> objList = (List<BlogList>) map.get("rows");
			if(objList!=null){
				
				int count = 20;
				if(objList.size()<20){
					count = objList.size();
				}
				for (int i = 0; i < count; i++) {
					BlogList blogList = objList.get(i);
					Map<String, Object> inMap = new HashMap<String, Object>();
					inMap.put("url", blogList.getWblUrl());
					inMap.put("fullContent", blogList.getWblContent());
					inMap.put("wsmId", blogList.getWsmId().getId());
					inMap.put("content", blogList.getWblContent());
					inMap.put("comment", blogList.getWblComment());
					inMap.put("ftorwarding", blogList.getWblView());
					inMap.put("author", blogList.getWblAuthor());
					Long time = Long.parseLong(blogList.getWblTimestamp()
							.toString()) * 1000;
					SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm"); // 格式化日期
					inMap.put("date", f.format(new Date(time)));
					myMap.add(inMap);
				}
			}

		}
		
		return myMap;
	}

	/**
	 * 
	 * <pre>
	 * 找出博客所在的所有站点
	 * </pre>
	 * 
	 * @return
	 */
	public List<Map<String, Object>> findWsmId() {
		logger.info("--findWsmId()方法");
		List<BlogList> list = findAll(BlogList.class);
		List<Map<String, Object>> myList = new ArrayList<Map<String, Object>>();
		Map<Object, Object> map = new HashMap<Object, Object>();
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				BlogList blogList = list.get(i);
				map.put(blogList.getWsmId().getId(), blogList.getWsmId().getWsmName());
			}
			for(Iterator it=map.keySet().iterator();it.hasNext();){
				Map<String, Object> myMap = new HashMap<String, Object>();
				Long key = (Long) it.next();
				myMap.put("key",key );
				myMap.put("value", map.get(key));
				myList.add(myMap);
			}
		}

		return myList;
	}
	
	/**
	 * 
	 * <pre>
	 * 查找今天热点博客(10条)
	 * </pre>
	 * @param request
	 * @return
	 */
	public List<Map<String, Object>> findTodayBlog() {
		logger.info("--findTodayBlog()方法");
		List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd"); // 格式化日期
		
		Date date = DateUtil.parseDateTime("2013-05-05 23:23:23");
		//Date date = new Date();
		String start = f.format(date);
		f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String end = f.format(date);
		Long startT = DateUtil.parseSimpleDate(start).getTime()/1000;
		Long endT = DateUtil.parseDateTime(end).getTime()/1000;
		Map<String, Object> map = findBlog(startT.intValue(), endT.intValue(), null, null,
				null, null, null, null);
		if (map != null && !"".equals(map.get("rows").toString())) {
			List<BlogList> objList = (List<BlogList>) map.get("rows");
			if(objList!=null){
				int count = 10;
				if(objList.size()<10){
					count = objList.size();
				}
				for (int i = 0; i < count; i++) {
					BlogList blogList = objList.get(i);
					Map<String, Object> inMap = new HashMap<String, Object>(); 
					inMap.put("wsmId", blogList.getWsmId().getId());
					inMap.put("title", blogList.getWblTitle());
					inMap.put("num1", blogList.getWblComment());
					inMap.put("num2", blogList.getWblView());
					inMap.put("num3", blogList.getWblAuthor());
					Long time = Long.parseLong(blogList.getWblTimestamp().toString()) * 1000;
					f = new SimpleDateFormat("yyyy-MM-dd HH:mm"); // 格式化日期
					inMap.put("date", f.format(new Date(time)));
					dataList.add(inMap);
				}
			}
		}
		
		return dataList;
	}
	
	/**
	 * 
	 * <pre>
	 * 查找今天涉穗博客数
	 * </pre>
	 * @return
	 */
	public int findTodayBlogCount() {
		logger.info("--findTodayBlogCount()方法");
		int count = 0;
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd"); // 格式化日期
		Date date = DateUtil.parseDateTime("2013-05-05 23:23:23");
		//Date date = new Date();
		String start = f.format(date);
		f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String end = f.format(date);
		Long startT = DateUtil.parseSimpleDate(start).getTime()/1000;
		Long endT = DateUtil.parseDateTime(end).getTime()/1000;
		Map<String, Object> map = findBlog(startT.intValue(), endT.intValue(), null, null,
				null, null, null, null);
		if (map != null) {
			count =  (Integer) map.get("total");
		}
		return count;
	}

}
