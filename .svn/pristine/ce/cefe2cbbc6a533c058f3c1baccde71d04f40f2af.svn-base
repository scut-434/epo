package com.gzgb.epo.dao.reportDistribution;

import java.util.List;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.QueryException;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.gzgb.epo.dao.base.BaseDaoImpl;
import com.gzgb.epo.entity.PublicEmotion;
import com.gzgb.epo.entity.ReportDistribution;

/**
 * 
 * <pre>
 * 报道区域 分布DaoImpl
 * </pre>
 * 
 * @author LiuYongbin
 * @version 1.0, 2014-2-26
 */
@Repository
public class ReportDistributionDaoImpl extends BaseDaoImpl<ReportDistribution>
		implements ReportDistributionDao {

/**
	 * 
	 * <pre>
	 *查找从指定月以来的记录
	 * </pre>
	 * 
	 * @param startTime  开始时间
	 * @param isAbout 是否涉穂
	 * @param map   对属性名加以限制
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<ReportDistribution> getListAfterTime(Integer startTime, Map<String, Long> map, Integer isAbout)
			throws QueryException {
		try {
			Criteria criteria = getSession().createCriteria(ReportDistribution.class);
			
			if(map != null && !map.isEmpty()){
				for(String key : map.keySet()){
					criteria.add(Restrictions.eq(key, map.get(key)));
				}
			}
			if(isAbout != null)
				criteria.add(Restrictions.eq("isAbout", isAbout));
			criteria.add(Restrictions.gt("time", startTime));
			List<ReportDistribution> list = criteria.list();
			if (list.size() == 0 || list == null) {
				return null;
			}
			return list;
		} catch (QueryException qe) {
			throw qe;
		}
	}
	
	/**
 	 * 
 	 * <pre>
 	 * 根据地区的Id，起始时间，情感倾向/政治倾向类型，是否涉穂获得list<正面/右倾的数量，中立的数量，负面/左倾的数量>
 	 * </pre>
 	 * @param startAndEnd  地区Id
 	 * @param startAndEnd	起始时间
 	 * @param isAbout 		是否涉穂
 	 * @return
 	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<ReportDistribution> getListBetweenTime(Long cityRegionId, List<Integer> startAndEnd, Integer isAbout)
			throws QueryException {
		try {
			Criteria criteria = getSession().createCriteria(ReportDistribution.class);
			criteria.add(Restrictions.eq("cityRegionId.id", cityRegionId));
			if(isAbout != null)
				criteria.add(Restrictions.eq("isAbout", isAbout));
			criteria.add(Restrictions.between("time", startAndEnd.get(0),startAndEnd.get(1)));
			List<ReportDistribution> list = criteria.list();
			return list;
		} catch (QueryException qe) {
			throw qe;
		}
	}
	
	
}
